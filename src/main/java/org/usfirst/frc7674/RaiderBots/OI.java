// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7674.RaiderBots;

import org.usfirst.frc7674.RaiderBots.commands.*;
import org.usfirst.frc7674.RaiderBots.controllers.BobXboxController;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc7674.RaiderBots.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    public JoystickButton aButton;
    public JoystickButton xButton;
    public JoystickButton bButton;
    public JoystickButton yButton;
    public JoystickButton leftBumper;
    public JoystickButton rightBumper;
    public JoystickButton select;
    public JoystickButton start;
    public BobXboxController driverController;
    public BobXboxController operatorController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driverController = new BobXboxController(1);
        operatorController = new BobXboxController(0);
    

        operatorController.aButton.whenPressed(new PneumaticsExtendSoleiodThree(false));
        operatorController.yButton.whenPressed(new PneumaticsExtendSoleiodThree(true));

        operatorController.xButton.whenPressed(new PneumaticsExtendElevatorSolenoid(false));
        operatorController.bButton.whenPressed(new PneumaticsExtendElevatorSolenoid(true));
        operatorController.rightBumper.whenPressed(new CollectorCollect());
        operatorController.leftBumper.whileHeld(new DualDrive());
        
        operatorController.leftBumper.whenPressed(new CollectorStop());


       // operatorController.xButton.whenPressed(new PneumaticsExtendSoleiodFour(false));
       //ss operatorController.bButton.whenPressed(new PneumaticsExtendSoleiodFour(true));



        /*
        rightBumper = new JoystickButton(driverController, 6);
        rightBumper.whileHeld(new FrontLiftElevator());
        leftBumper = new JoystickButton(driverController, 5);
        leftBumper.whileHeld(new MotorSpinForward());
        
        yButton = new JoystickButton(driverController, 4);
        yButton.whileHeld(new PneumaticsExtendElevatorSolenoid(false));
        bButton = new JoystickButton(driverController, 2);
        bButton.whenPressed(new PneumaticsExtendSoleiodFour(false));
        xButton = new JoystickButton(driverController, 3);
        xButton.whileHeld(new PneumaticsExtendElevatorSolenoid(true));
        aButton = new JoystickButton(driverController, 1);
        aButton.whenPressed(new PneumaticsExtendSoleiodFour(true));
        */


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("CollectorOpen", new CollectorOpen());
        SmartDashboard.putData("ElevatorUp", new ElevatorDrive());
        SmartDashboard.putData("ElevatorDown", new ElevatorDown());
        SmartDashboard.putData("CollectorClose", new CollectorClose());
        SmartDashboard.putData("MotorSpinForward", new MotorSpinForward());
        SmartDashboard.putData("MotorSpinBackward", new FrontLiftElevator());
        SmartDashboard.putData("CommandOne", new CommandOne());
        SmartDashboard.putData("CommandTwo", new CommandTwo());
        SmartDashboard.putData("ExtendSolenoidFour", new PneumaticsExtendSoleiodFour(true));
        SmartDashboard.putData("RetractsSolenoidFour", new PneumaticsExtendSoleiodFour(false));
        SmartDashboard.putData("CommandFour", new Roll());
        SmartDashboard.putData("CompressorRun", new CompressorRun());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriverController() {
        return driverController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

